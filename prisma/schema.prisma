// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypePostEnum {
  normal
  evento
}

enum TypeRoleEnum {
  admin
  user
}

model User {
  id                  Int          @id @default(autoincrement())
  userName            String
  email               String       @unique
  password            String?
  userRole            TypeRoleEnum @default(user)
  facebookId          String?      @unique
  googleId            String?      @unique
  publicIdImgUrl      String?
  profilePictureURL   String?
  externalAccessToken String?
  resetToken          String?
  resetTokenExpiry    DateTime?
  galleries           Media[]
  donations           Donations[]
  comment             Comments[]
  post                Post[]
  answer              Answer[]
}

model Post {
  typePost    TypePostEnum @default(normal)
  id          Int          @id @default(autoincrement())
  title       String
  description String
  createAt    DateTime     @default(now())
  media       Media[]
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  comments    Comments[]
}

model Media {
  id          Int     @id @default(autoincrement())
  imgName     String?
  imageUrl    String
  Description String?
  publicId    String?
  postId      Int
  post        Post    @relation(fields: [postId], references: [id])
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

model Donations {
  id              Int      @id @default(autoincrement())
  amount          Decimal  @db.Decimal(10, 2)
  concurrency     String
  paypamentStatus String
  paypamentMethod String
  stripeChargeId  String
  userId          Int
  operationdate   DateTime
  timeofoperation DateTime
  user            User     @relation(fields: [userId], references: [id])
}

model Comments {
  id       Int      @id @default(autoincrement())
  user     User?    @relation(fields: [userId], references: [id])
  userId   Int?
  comment  String
  createAt DateTime @default(now())
  postId   Int
  post     Post     @relation(fields: [postId], references: [id])
  answer   Answer[]

  @@index([userId], name: "userId")
}

model Answer {
  id        Int      @id @default(autoincrement())
  answer    String
  commentId Int
  comments  Comments @relation(fields: [commentId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
